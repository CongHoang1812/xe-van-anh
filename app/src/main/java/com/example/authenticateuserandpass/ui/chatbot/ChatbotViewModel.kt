package com.example.authenticateuserandpass.ui.chatbot

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel

class ChatbotViewModel : ViewModel() {

    private val _messages = MutableLiveData<List<ChatMessage>>()
    val messages: LiveData<List<ChatMessage>> = _messages

    private val currentMessages = mutableListOf<ChatMessage>()

    init {
        // Welcome message
        addBotMessage("Xin ch√†o! T√¥i l√† tr·ª£ l√Ω nh√† xe V√¢n Anh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ:\n\n‚Ä¢ Gi√° v√© xe\n‚Ä¢ Tuy·∫øn ƒë∆∞·ªùng\n‚Ä¢ Th√¥ng tin li√™n h·ªá\n‚Ä¢ H·ªßy v√©\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨?")
    }

    fun sendMessage(message: String) {
        // Add user message
        addUserMessage(message)

        // Process and respond
        val response = processUserMessage(message.lowercase().trim())
        addBotMessage(response.message, response.options)
    }

    fun handleOptionSelected(optionValue: String, optionText: String) {
        // Add user's selection as a message
        addUserMessage(optionText)

        // Respond based on option
        val response = when (optionValue) {
            "satisfied" -> "C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°! Ch√∫ng t√¥i r·∫•t vui khi ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ c·∫ßn h·ªó tr·ª£ g√¨ kh√°c kh√¥ng?"
            "not_satisfied" -> "T√¥i r·∫•t ti·∫øc v√¨ ch∆∞a h·ªó tr·ª£ t·ªët cho b·∫°n. B·∫°n c√≥ th·ªÉ li√™n h·ªá hotline 1900-xxxx ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp t·ª´ nh√¢n vi√™n. C√≥ g√¨ kh√°c t√¥i c√≥ th·ªÉ gi√∫p kh√¥ng?"
            else -> "C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!"
        }
        addBotMessage(response)
    }

    private fun addUserMessage(message: String) {
        val chatMessage = ChatMessage(
            message = message,
            isFromUser = true
        )
        currentMessages.add(chatMessage)
        _messages.value = currentMessages.toList()
    }

    private fun addBotMessage(message: String, options: List<ChatOption>? = null) {
        val chatMessage = ChatMessage(
            message = message,
            isFromUser = false,
            options = options
        )
        currentMessages.add(chatMessage)
        _messages.value = currentMessages.toList()
    }

    private fun processUserMessage(message: String): BotResponse {
        return when {
            // Gi√° v√©
            message.contains("gi√°") || message.contains("v√©") || message.contains("bao nhi√™u") || message.contains("ti·ªÅn") -> {
                BotResponse(
                    "Gi√° v√© c·ªßa ch√∫ng t√¥i ph·ª• thu·ªôc v√†o tuy·∫øn ƒë∆∞·ªùng:\n\n" +
                            "üöå H√† N·ªôi - TP.HCM: 450,000ƒë - 550,000ƒë\n" +
                            "üöå H√† N·ªôi - ƒê√† N·∫µng: 350,000ƒë - 420,000ƒë\n" +
                            "üöå TP.HCM - ƒê√† L·∫°t: 180,000ƒë - 220,000ƒë\n" +
                            "üöå H√† N·ªôi - H·∫£i Ph√≤ng: 120,000ƒë - 150,000ƒë\n\n" +
                            "Gi√° c√≥ th·ªÉ thay ƒë·ªïi theo ng√†y v√† lo·∫°i gh·∫ø. B·∫°n c√≥ h√†i l√≤ng v·ªõi th√¥ng tin n√†y kh√¥ng?",
                    listOf(
                        ChatOption("satisfied", "H√†i l√≤ng", "satisfied"),
                        ChatOption("not_satisfied", "Kh√¥ng h√†i l√≤ng", "not_satisfied")
                    )
                )
            }

            // Tuy·∫øn ƒë∆∞·ªùng
            message.contains("tuy·∫øn") || message.contains("ƒë∆∞·ªùng") || message.contains("l·ªô tr√¨nh") ||
                    message.contains("ch·∫°y") || message.contains("ƒëi ƒë√¢u") -> {
                BotResponse(
                    "Ch√∫ng t√¥i c√≥ c√°c tuy·∫øn ƒë∆∞·ªùng ch√≠nh:\n\n" +
                            "üõ£Ô∏è Mi·ªÅn B·∫Øc:\n" +
                            "‚Ä¢ H√† N·ªôi - H·∫£i Ph√≤ng - Qu·∫£ng Ninh\n" +
                            "‚Ä¢ H√† N·ªôi - Thanh H√≥a - Ngh·ªá An\n\n" +
                            "üõ£Ô∏è Mi·ªÅn Trung:\n" +
                            "‚Ä¢ ƒê√† N·∫µng - Hu·∫ø - Qu·∫£ng B√¨nh\n" +
                            "‚Ä¢ H√† N·ªôi - ƒê√† N·∫µng (cao t·ªëc)\n\n" +
                            "üõ£Ô∏è Mi·ªÅn Nam:\n" +
                            "‚Ä¢ TP.HCM - V≈©ng T√†u - Phan Thi·∫øt\n" +
                            "‚Ä¢ TP.HCM - ƒê√† L·∫°t - Nha Trang\n\n" +
                            "Th√¥ng tin n√†y c√≥ h·ªØu √≠ch kh√¥ng?",
                    listOf(
                        ChatOption("satisfied", "H√†i l√≤ng", "satisfied"),
                        ChatOption("not_satisfied", "Kh√¥ng h√†i l√≤ng", "not_satisfied")
                    )
                )
            }

            // Li√™n h·ªá
            message.contains("li√™n h·ªá") || message.contains("s·ªë ƒëi·ªán tho·∫°i") || message.contains("hotline") ||
                    message.contains("g·ªçi") || message.contains("phone") -> {
                BotResponse(
                    "Th√¥ng tin li√™n h·ªá nh√† xe V√¢n Anh:\n\n" +
                            "üìû Hotline: 1900-8080\n" +
                            "üì± Zalo: 0901-234-567\n" +
                            "üåê Website: www.nhaxevananh.com\n" +
                            "üìß Email: support@nhaxevananh.com\n\n" +
                            "üïí Th·ªùi gian h·ªó tr·ª£: 24/7\n" +
                            "üìç VƒÉn ph√≤ng ch√≠nh: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM\n\n" +
                            "B·∫°n c√≥ h√†i l√≤ng v·ªõi th√¥ng tin n√†y kh√¥ng?",
                    listOf(
                        ChatOption("satisfied", "H√†i l√≤ng", "satisfied"),
                        ChatOption("not_satisfied", "Kh√¥ng h√†i l√≤ng", "not_satisfied")
                    )
                )
            }

            // H·ªßy v√©
            message.contains("h·ªßy") || message.contains("ho√†n") || message.contains("tr·∫£") ||
                    message.contains("cancel") || message.contains("refund") -> {
                BotResponse(
                    "Ch√≠nh s√°ch h·ªßy v√© nh√† xe V√¢n Anh:\n\n" +
                            "‚úÖ H·ªßy tr∆∞·ªõc 24h: Ho√†n 100% gi√° v√©\n" +
                            "‚úÖ H·ªßy tr∆∞·ªõc 12h: Ho√†n 80% gi√° v√©\n" +
                            "‚úÖ H·ªßy tr∆∞·ªõc 6h: Ho√†n 50% gi√° v√©\n" +
                            "‚ùå H·ªßy d∆∞·ªõi 6h: Kh√¥ng ho√†n ti·ªÅn\n\n" +
                            "ƒê·ªÉ h·ªßy v√©, b·∫°n c√≥ th·ªÉ:\n" +
                            "‚Ä¢ G·ªçi hotline: 1900-8080\n" +
                            "‚Ä¢ Nh·∫Øn tin Zalo: 0901-234-567\n" +
                            "‚Ä¢ ƒê·∫øn tr·ª±c ti·∫øp b·∫øn xe\n\n" +
                            "Th√¥ng tin n√†y c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng?",
                    listOf(
                        ChatOption("satisfied", "H√†i l√≤ng", "satisfied"),
                        ChatOption("not_satisfied", "Kh√¥ng h√†i l√≤ng", "not_satisfied")
                    )
                )
            }

            // Ch√†o h·ªèi
            message.contains("ch√†o") || message.contains("hello") || message.contains("hi") -> {
                BotResponse("Xin ch√†o! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t√¨m hi·ªÉu v·ªÅ gi√° v√©, tuy·∫øn ƒë∆∞·ªùng, th√¥ng tin li√™n h·ªá ho·∫∑c ch√≠nh s√°ch h·ªßy v√©. B·∫°n c·∫ßn bi·∫øt th√¥ng tin g√¨?")
            }

            // C·∫£m ∆°n
            message.contains("c·∫£m ∆°n") || message.contains("thanks") || message.contains("thank you") -> {
                BotResponse("Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ c·∫ßn h·ªó tr·ª£ g√¨ kh√°c kh√¥ng?")
            }

            // M·∫∑c ƒë·ªãnh
            else -> {
                BotResponse(
                    "T√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\n\n" +
                            "‚Ä¢ Gi√° v√© xe\n" +
                            "‚Ä¢ Tuy·∫øn ƒë∆∞·ªùng\n" +
                            "‚Ä¢ Th√¥ng tin li√™n h·ªá\n" +
                            "‚Ä¢ Ch√≠nh s√°ch h·ªßy v√©\n\n" +
                            "B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ h∆°n ƒë∆∞·ª£c kh√¥ng?"
                )
            }
        }
    }

    private data class BotResponse(
        val message: String,
        val options: List<ChatOption>? = null
    )
}
