package com.example.authenticateuserandpass.ui.a_main_driver_ui.home

import android.app.Activity
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.view.View
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.GravityCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.ui.setupWithNavController
import com.example.authenticateuserandpass.R
import com.example.authenticateuserandpass.databinding.ActivityMainDriverHomeBinding
import com.google.android.material.bottomnavigation.BottomNavigationView

class HomeMainDriverActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainDriverHomeBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivityMainDriverHomeBinding.inflate(layoutInflater)
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        setLightStatusBar(this)
        setupBottomNav()
    }
    private fun setupBottomNav() {
        val navView: BottomNavigationView = binding.bottomMainDriverNavView
        val navHostFragment =
            (supportFragmentManager.findFragmentById(R.id.fragmentContainerView2) as NavHostFragment)
        val navController = navHostFragment.navController
        navView.setupWithNavController(navController)
    }

    fun setLightStatusBar(activity: Activity) {
        val window = activity.window

        // B1: Cho ph√©p ho·∫∑c kh√¥ng cho content "ch·∫°y l√™n status bar"
        // true = gi·ªØ l·∫°i padding h·ªá th·ªëng (UI n·∫±m d∆∞·ªõi status bar, an to√†n)
        WindowCompat.setDecorFitsSystemWindows(window, true)

        // B2: D√π b·ªã deprecated, v·∫´n KH√îNG sao khi set ·ªü ƒë√¢y (material standard)
        @Suppress("DEPRECATION") // üëç tr√°nh warning
        window.statusBarColor = Color.WHITE // ho·∫∑c ContextCompat.getColor(this, R.color.white)

        // B3: Ki·ªÉm so√°t m√†u icon status bar (ƒëen hay tr·∫Øng)
        val insetsController = WindowInsetsControllerCompat(window, window.decorView)
        insetsController.isAppearanceLightStatusBars = true // ‚úÖ icon ƒëen tr√™n n·ªÅn tr·∫Øng
    }


}